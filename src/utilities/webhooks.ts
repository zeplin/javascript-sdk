/* tslint:disable */
/* eslint-disable */
/**
 * Zeplin API
 * Access your resources in Zeplin
 *
 * Contact: support@zeplin.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { createHmac } from "crypto";
import {
    WorkspaceNotificationEvent,
    WorkspaceNotificationCreatedEvent,
    WorkspaceNotificationUpdatedEvent,
    WorkspaceProjectEvent,
    WorkspaceProjectCreatedEvent,
    WorkspaceProjectUpdatedEvent,
    WorkspaceProjectDeletedEvent,
    WorkspaceProjectActivatedEvent,
    WorkspaceProjectArchivedEvent,
    WorkspaceProjectStyleguideLinkedEvent,
    WorkspaceProjectStyleguideUnlinkedEvent,
    WorkspaceStyleguideEvent,
    WorkspaceStyleguideCreatedEvent,
    WorkspaceStyleguideUpdatedEvent,
    WorkspaceStyleguideDeletedEvent,
    WorkspaceStyleguideActivatedEvent,
    WorkspaceStyleguideArchivedEvent,
    WorkspaceStyleguideStyleguideLinkedEvent,
    WorkspaceStyleguideStyleguideUnlinkedEvent,
    WorkspaceOrganizationEvent,
    WorkspaceOrganizationUpdatedEvent,
    WorkspaceOrganizationJoinRequestedEvent,
    WorkspaceOrganizationMemberEvent,
    WorkspaceOrganizationMemberInvitedEvent,
    WorkspaceOrganizationMemberRemovedEvent,
    WorkspaceOrganizationMemberRoleUpdatedEvent,
    WorkspaceOrganizationMemberTagUpdatedEvent,
    ProjectMemberEvent,
    ProjectMemberInvitedEvent,
    ProjectMemberRemovedEvent,
    ProjectMemberRoleUpdatedEvent,
    ProjectScreenEvent,
    ProjectScreenCreatedEvent,
    ProjectScreenDeletedEvent,
    ProjectScreenUpdatedEvent,
    ProjectScreenVersionEvent,
    ProjectScreenVersionCreatedEvent,
    ProjectScreenVersionDeletedEvent,
    ProjectScreenVersionUpdatedEvent,
    ProjectNoteEvent,
    ProjectNoteCreatedEvent,
    ProjectNoteDeletedEvent,
    ProjectNoteUpdatedEvent,
    ProjectNoteCommentEvent,
    ProjectNoteCommentCreatedEvent,
    ProjectNoteCommentDeletedEvent,
    ProjectNoteCommentUpdatedEvent,
    ProjectNoteCommentReactionEvent,
    ProjectNoteCommentReactionCreatedEvent,
    ProjectNoteCommentReactionDeletedEvent,
    ProjectColorEvent,
    ProjectColorCreatedEvent,
    ProjectColorDeletedEvent,
    ProjectColorUpdatedEvent,
    ProjectFlowBoardEvent,
    ProjectFlowBoardBuiltEvent,
    ProjectTextStyleEvent,
    ProjectTextStyleCreatedEvent,
    ProjectTextStyleDeletedEvent,
    ProjectTextStyleUpdatedEvent,
    ProjectComponentEvent,
    ProjectComponentCreatedEvent,
    ProjectComponentDeletedEvent,
    ProjectComponentUpdatedEvent,
    ProjectComponentVersionCreatedEvent,
    ProjectSpacingTokenEvent,
    ProjectSpacingTokenCreatedEvent,
    ProjectSpacingTokenDeletedEvent,
    ProjectSpacingTokenUpdatedEvent,
    StyleguideMemberEvent,
    StyleguideMemberInvitedEvent,
    StyleguideMemberRemovedEvent,
    StyleguideMemberRoleUpdatedEvent,
    StyleguideColorEvent,
    StyleguideColorCreatedEvent,
    StyleguideColorDeletedEvent,
    StyleguideColorUpdatedEvent,
    StyleguideTextStyleEvent,
    StyleguideTextStyleCreatedEvent,
    StyleguideTextStyleDeletedEvent,
    StyleguideTextStyleUpdatedEvent,
    StyleguideComponentEvent,
    StyleguideComponentCreatedEvent,
    StyleguideComponentDeletedEvent,
    StyleguideComponentUpdatedEvent,
    StyleguideComponentVersionCreatedEvent,
    StyleguideSpacingTokenEvent,
    StyleguideSpacingTokenCreatedEvent,
    StyleguideSpacingTokenDeletedEvent,
    StyleguideSpacingTokenUpdatedEvent,
    PingEvent,
    transformJSONToWebhookEvent,
    WebhookEvent
} from "../models";

interface VerifyWebhookEventParams {
    payload: unknown;
    signature: string;
    deliveryTimestamp: number;
    secret: string;
}

export class Webhooks {
    static verifyEvent(
        {
            payload,
            signature,
            deliveryTimestamp,
            secret,
        }: VerifyWebhookEventParams): boolean {
        const generatedSignature = createHmac("sha256", secret)
            .update(`${deliveryTimestamp}.${JSON.stringify(payload)}`)
            .digest("hex");
        return signature === generatedSignature;
    }

    static transformPayloadToWebhookEvent(payload: unknown): WebhookEvent {
        return transformJSONToWebhookEvent(payload);
    }

    static isPingEvent(data: WebhookEvent): data is PingEvent {
        return data.event === "ping";
    }

    static isWorkspaceNotificationEvent(data: WebhookEvent): data is WorkspaceNotificationEvent {
        return data.event === "workspace.notification";
    }

    static isWorkspaceNotificationCreatedEvent(data: WebhookEvent): data is WorkspaceNotificationCreatedEvent {
        return Webhooks.isWorkspaceNotificationEvent(data) && data.action === "created";
    }

    static isWorkspaceNotificationUpdatedEvent(data: WebhookEvent): data is WorkspaceNotificationUpdatedEvent {
        return Webhooks.isWorkspaceNotificationEvent(data) && data.action === "updated";
    }

    static isWorkspaceProjectEvent(data: WebhookEvent): data is WorkspaceProjectEvent {
        return data.event === "workspace.project";
    }

    static isWorkspaceProjectCreatedEvent(data: WebhookEvent): data is WorkspaceProjectCreatedEvent {
        return Webhooks.isWorkspaceProjectEvent(data) && data.action === "created";
    }

    static isWorkspaceProjectUpdatedEvent(data: WebhookEvent): data is WorkspaceProjectUpdatedEvent {
        return Webhooks.isWorkspaceProjectEvent(data) && data.action === "updated";
    }

    static isWorkspaceProjectDeletedEvent(data: WebhookEvent): data is WorkspaceProjectDeletedEvent {
        return Webhooks.isWorkspaceProjectEvent(data) && data.action === "deleted";
    }

    static isWorkspaceProjectActivatedEvent(data: WebhookEvent): data is WorkspaceProjectActivatedEvent {
        return Webhooks.isWorkspaceProjectEvent(data) && data.action === "activated";
    }

    static isWorkspaceProjectArchivedEvent(data: WebhookEvent): data is WorkspaceProjectArchivedEvent {
        return Webhooks.isWorkspaceProjectEvent(data) && data.action === "archived";
    }

    static isWorkspaceProjectStyleguideLinkedEvent(data: WebhookEvent): data is WorkspaceProjectStyleguideLinkedEvent {
        return Webhooks.isWorkspaceProjectEvent(data) && data.action === "styleguide_linked";
    }

    static isWorkspaceProjectStyleguideUnlinkedEvent(data: WebhookEvent): data is WorkspaceProjectStyleguideUnlinkedEvent {
        return Webhooks.isWorkspaceProjectEvent(data) && data.action === "styleguide_unlinked";
    }

    static isWorkspaceStyleguideEvent(data: WebhookEvent): data is WorkspaceStyleguideEvent {
        return data.event === "workspace.styleguide";
    }

    static isWorkspaceStyleguideCreatedEvent(data: WebhookEvent): data is WorkspaceStyleguideCreatedEvent {
        return Webhooks.isWorkspaceStyleguideEvent(data) && data.action === "created";
    }

    static isWorkspaceStyleguideUpdatedEvent(data: WebhookEvent): data is WorkspaceStyleguideUpdatedEvent {
        return Webhooks.isWorkspaceStyleguideEvent(data) && data.action === "updated";
    }

    static isWorkspaceStyleguideDeletedEvent(data: WebhookEvent): data is WorkspaceStyleguideDeletedEvent {
        return Webhooks.isWorkspaceStyleguideEvent(data) && data.action === "deleted";
    }

    static isWorkspaceStyleguideActivatedEvent(data: WebhookEvent): data is WorkspaceStyleguideActivatedEvent {
        return Webhooks.isWorkspaceStyleguideEvent(data) && data.action === "activated";
    }

    static isWorkspaceStyleguideArchivedEvent(data: WebhookEvent): data is WorkspaceStyleguideArchivedEvent {
        return Webhooks.isWorkspaceStyleguideEvent(data) && data.action === "archived";
    }

    static isWorkspaceStyleguideStyleguideLinkedEvent(data: WebhookEvent): data is WorkspaceStyleguideStyleguideLinkedEvent {
        return Webhooks.isWorkspaceStyleguideEvent(data) && data.action === "styleguide_linked";
    }

    static isWorkspaceStyleguideStyleguideUnlinkedEvent(data: WebhookEvent): data is WorkspaceStyleguideStyleguideUnlinkedEvent {
        return Webhooks.isWorkspaceStyleguideEvent(data) && data.action === "styleguide_unlinked";
    }

    static isWorkspaceOrganizationEvent(data: WebhookEvent): data is WorkspaceOrganizationEvent {
        return data.event === "workspace.organization";
    }

    static isWorkspaceOrganizationUpdatedEvent(data: WebhookEvent): data is WorkspaceOrganizationUpdatedEvent {
        return Webhooks.isWorkspaceOrganizationEvent(data) && data.action === "updated";
    }

    static isWorkspaceOrganizationJoinRequestedEvent(data: WebhookEvent): data is WorkspaceOrganizationJoinRequestedEvent {
        return Webhooks.isWorkspaceOrganizationEvent(data) && data.action === "join_requested";
    }

    static isWorkspaceOrganizationMemberEvent(data: WebhookEvent): data is WorkspaceOrganizationMemberEvent {
        return data.event === "workspace.organization.member";
    }

    static isWorkspaceOrganizationMemberInvitedEvent(data: WebhookEvent): data is WorkspaceOrganizationMemberInvitedEvent {
        return Webhooks.isWorkspaceOrganizationMemberEvent(data) && data.action === "invited";
    }

    static isWorkspaceOrganizationMemberRemovedEvent(data: WebhookEvent): data is WorkspaceOrganizationMemberRemovedEvent {
        return Webhooks.isWorkspaceOrganizationMemberEvent(data) && data.action === "removed";
    }

    static isWorkspaceOrganizationMemberRoleUpdatedEvent(data: WebhookEvent): data is WorkspaceOrganizationMemberRoleUpdatedEvent {
        return Webhooks.isWorkspaceOrganizationMemberEvent(data) && data.action === "role_updated";
    }

    static isWorkspaceOrganizationMemberTagUpdatedEvent(data: WebhookEvent): data is WorkspaceOrganizationMemberTagUpdatedEvent {
        return Webhooks.isWorkspaceOrganizationMemberEvent(data) && data.action === "tag_updated";
    }

    static isProjectMemberEvent(data: WebhookEvent): data is ProjectMemberEvent {
        return data.event === "project.member";
    }

    static isProjectMemberInvitedEvent(data: WebhookEvent): data is ProjectMemberInvitedEvent {
        return Webhooks.isProjectMemberEvent(data) && data.action === "invited";
    }

    static isProjectMemberRemovedEvent(data: WebhookEvent): data is ProjectMemberRemovedEvent {
        return Webhooks.isProjectMemberEvent(data) && data.action === "removed";
    }

    static isProjectMemberRoleUpdatedEvent(data: WebhookEvent): data is ProjectMemberRoleUpdatedEvent {
        return Webhooks.isProjectMemberEvent(data) && data.action === "role_updated";
    }

    static isProjectScreenEvent(data: WebhookEvent): data is ProjectScreenEvent {
        return data.event === "project.screen";
    }

    static isProjectScreenCreatedEvent(data: WebhookEvent): data is ProjectScreenCreatedEvent {
        return Webhooks.isProjectScreenEvent(data) && data.action === "created";
    }

    static isProjectScreenDeletedEvent(data: WebhookEvent): data is ProjectScreenDeletedEvent {
        return Webhooks.isProjectScreenEvent(data) && data.action === "deleted";
    }

    static isProjectScreenUpdatedEvent(data: WebhookEvent): data is ProjectScreenUpdatedEvent {
        return Webhooks.isProjectScreenEvent(data) && data.action === "updated";
    }

    static isProjectScreenVersionEvent(data: WebhookEvent): data is ProjectScreenVersionEvent {
        return data.event === "project.screen.version";
    }

    static isProjectScreenVersionCreatedEvent(data: WebhookEvent): data is ProjectScreenVersionCreatedEvent {
        return Webhooks.isProjectScreenVersionEvent(data) && data.action === "created";
    }

    static isProjectScreenVersionDeletedEvent(data: WebhookEvent): data is ProjectScreenVersionDeletedEvent {
        return Webhooks.isProjectScreenVersionEvent(data) && data.action === "deleted";
    }

    static isProjectScreenVersionUpdatedEvent(data: WebhookEvent): data is ProjectScreenVersionUpdatedEvent {
        return Webhooks.isProjectScreenVersionEvent(data) && data.action === "updated";
    }

    static isProjectNoteEvent(data: WebhookEvent): data is ProjectNoteEvent {
        return data.event === "project.note";
    }

    static isProjectNoteCreatedEvent(data: WebhookEvent): data is ProjectNoteCreatedEvent {
        return Webhooks.isProjectNoteEvent(data) && data.action === "created";
    }

    static isProjectNoteDeletedEvent(data: WebhookEvent): data is ProjectNoteDeletedEvent {
        return Webhooks.isProjectNoteEvent(data) && data.action === "deleted";
    }

    static isProjectNoteUpdatedEvent(data: WebhookEvent): data is ProjectNoteUpdatedEvent {
        return Webhooks.isProjectNoteEvent(data) && data.action === "updated";
    }

    static isProjectNoteCommentEvent(data: WebhookEvent): data is ProjectNoteCommentEvent {
        return data.event === "project.note.comment";
    }

    static isProjectNoteCommentCreatedEvent(data: WebhookEvent): data is ProjectNoteCommentCreatedEvent {
        return Webhooks.isProjectNoteCommentEvent(data) && data.action === "created";
    }

    static isProjectNoteCommentDeletedEvent(data: WebhookEvent): data is ProjectNoteCommentDeletedEvent {
        return Webhooks.isProjectNoteCommentEvent(data) && data.action === "deleted";
    }

    static isProjectNoteCommentUpdatedEvent(data: WebhookEvent): data is ProjectNoteCommentUpdatedEvent {
        return Webhooks.isProjectNoteCommentEvent(data) && data.action === "updated";
    }

    static isProjectNoteCommentReactionEvent(data: WebhookEvent): data is ProjectNoteCommentReactionEvent {
        return data.event === "project.note.comment.reaction";
    }

    static isProjectNoteCommentReactionCreatedEvent(data: WebhookEvent): data is ProjectNoteCommentReactionCreatedEvent {
        return Webhooks.isProjectNoteCommentReactionEvent(data) && data.action === "created";
    }

    static isProjectNoteCommentReactionDeletedEvent(data: WebhookEvent): data is ProjectNoteCommentReactionDeletedEvent {
        return Webhooks.isProjectNoteCommentReactionEvent(data) && data.action === "deleted";
    }

    static isProjectColorEvent(data: WebhookEvent): data is ProjectColorEvent {
        return data.event === "project.color";
    }

    static isProjectColorCreatedEvent(data: WebhookEvent): data is ProjectColorCreatedEvent {
        return Webhooks.isProjectColorEvent(data) && data.action === "created";
    }

    static isProjectColorDeletedEvent(data: WebhookEvent): data is ProjectColorDeletedEvent {
        return Webhooks.isProjectColorEvent(data) && data.action === "deleted";
    }

    static isProjectColorUpdatedEvent(data: WebhookEvent): data is ProjectColorUpdatedEvent {
        return Webhooks.isProjectColorEvent(data) && data.action === "updated";
    }

    static isProjectFlowBoardEvent(data: WebhookEvent): data is ProjectFlowBoardEvent {
        return data.event === "project.flow_board";
    }

    static isProjectFlowBoardBuiltEvent(data: WebhookEvent): data is ProjectFlowBoardBuiltEvent {
        return Webhooks.isProjectFlowBoardEvent(data) && data.action === "built";
    }

    static isProjectTextStyleEvent(data: WebhookEvent): data is ProjectTextStyleEvent {
        return data.event === "project.text_style";
    }

    static isProjectTextStyleCreatedEvent(data: WebhookEvent): data is ProjectTextStyleCreatedEvent {
        return Webhooks.isProjectTextStyleEvent(data) && data.action === "created";
    }

    static isProjectTextStyleDeletedEvent(data: WebhookEvent): data is ProjectTextStyleDeletedEvent {
        return Webhooks.isProjectTextStyleEvent(data) && data.action === "deleted";
    }

    static isProjectTextStyleUpdatedEvent(data: WebhookEvent): data is ProjectTextStyleUpdatedEvent {
        return Webhooks.isProjectTextStyleEvent(data) && data.action === "updated";
    }

    static isProjectComponentEvent(data: WebhookEvent): data is ProjectComponentEvent {
        return data.event === "project.component";
    }

    static isProjectComponentCreatedEvent(data: WebhookEvent): data is ProjectComponentCreatedEvent {
        return Webhooks.isProjectComponentEvent(data) && data.action === "created";
    }

    static isProjectComponentDeletedEvent(data: WebhookEvent): data is ProjectComponentDeletedEvent {
        return Webhooks.isProjectComponentEvent(data) && data.action === "deleted";
    }

    static isProjectComponentUpdatedEvent(data: WebhookEvent): data is ProjectComponentUpdatedEvent {
        return Webhooks.isProjectComponentEvent(data) && data.action === "updated";
    }

    static isProjectComponentVersionCreatedEvent(data: WebhookEvent): data is ProjectComponentVersionCreatedEvent {
        return Webhooks.isProjectComponentEvent(data) && data.action === "version_created";
    }

    static isProjectSpacingTokenEvent(data: WebhookEvent): data is ProjectSpacingTokenEvent {
        return data.event === "project.spacing_token";
    }

    static isProjectSpacingTokenCreatedEvent(data: WebhookEvent): data is ProjectSpacingTokenCreatedEvent {
        return Webhooks.isProjectSpacingTokenEvent(data) && data.action === "created";
    }

    static isProjectSpacingTokenDeletedEvent(data: WebhookEvent): data is ProjectSpacingTokenDeletedEvent {
        return Webhooks.isProjectSpacingTokenEvent(data) && data.action === "deleted";
    }

    static isProjectSpacingTokenUpdatedEvent(data: WebhookEvent): data is ProjectSpacingTokenUpdatedEvent {
        return Webhooks.isProjectSpacingTokenEvent(data) && data.action === "updated";
    }

    static isStyleguideMemberEvent(data: WebhookEvent): data is StyleguideMemberEvent {
        return data.event === "styleguide.member";
    }

    static isStyleguideMemberInvitedEvent(data: WebhookEvent): data is StyleguideMemberInvitedEvent {
        return Webhooks.isStyleguideMemberEvent(data) && data.action === "invited";
    }

    static isStyleguideMemberRemovedEvent(data: WebhookEvent): data is StyleguideMemberRemovedEvent {
        return Webhooks.isStyleguideMemberEvent(data) && data.action === "removed";
    }

    static isStyleguideMemberRoleUpdatedEvent(data: WebhookEvent): data is StyleguideMemberRoleUpdatedEvent {
        return Webhooks.isStyleguideMemberEvent(data) && data.action === "role_updated";
    }

    static isStyleguideColorEvent(data: WebhookEvent): data is StyleguideColorEvent {
        return data.event === "styleguide.color";
    }

    static isStyleguideColorCreatedEvent(data: WebhookEvent): data is StyleguideColorCreatedEvent {
        return Webhooks.isStyleguideColorEvent(data) && data.action === "created";
    }

    static isStyleguideColorDeletedEvent(data: WebhookEvent): data is StyleguideColorDeletedEvent {
        return Webhooks.isStyleguideColorEvent(data) && data.action === "deleted";
    }

    static isStyleguideColorUpdatedEvent(data: WebhookEvent): data is StyleguideColorUpdatedEvent {
        return Webhooks.isStyleguideColorEvent(data) && data.action === "updated";
    }

    static isStyleguideTextStyleEvent(data: WebhookEvent): data is StyleguideTextStyleEvent {
        return data.event === "styleguide.text_style";
    }

    static isStyleguideTextStyleCreatedEvent(data: WebhookEvent): data is StyleguideTextStyleCreatedEvent {
        return Webhooks.isStyleguideTextStyleEvent(data) && data.action === "created";
    }

    static isStyleguideTextStyleDeletedEvent(data: WebhookEvent): data is StyleguideTextStyleDeletedEvent {
        return Webhooks.isStyleguideTextStyleEvent(data) && data.action === "deleted";
    }

    static isStyleguideTextStyleUpdatedEvent(data: WebhookEvent): data is StyleguideTextStyleUpdatedEvent {
        return Webhooks.isStyleguideTextStyleEvent(data) && data.action === "updated";
    }

    static isStyleguideComponentEvent(data: WebhookEvent): data is StyleguideComponentEvent {
        return data.event === "styleguide.component";
    }

    static isStyleguideComponentCreatedEvent(data: WebhookEvent): data is StyleguideComponentCreatedEvent {
        return Webhooks.isStyleguideComponentEvent(data) && data.action === "created";
    }

    static isStyleguideComponentDeletedEvent(data: WebhookEvent): data is StyleguideComponentDeletedEvent {
        return Webhooks.isStyleguideComponentEvent(data) && data.action === "deleted";
    }

    static isStyleguideComponentUpdatedEvent(data: WebhookEvent): data is StyleguideComponentUpdatedEvent {
        return Webhooks.isStyleguideComponentEvent(data) && data.action === "updated";
    }

    static isStyleguideComponentVersionCreatedEvent(data: WebhookEvent): data is StyleguideComponentVersionCreatedEvent {
        return Webhooks.isStyleguideComponentEvent(data) && data.action === "version_created";
    }

    static isStyleguideSpacingTokenEvent(data: WebhookEvent): data is StyleguideSpacingTokenEvent {
        return data.event === "styleguide.spacing_token";
    }

    static isStyleguideSpacingTokenCreatedEvent(data: WebhookEvent): data is StyleguideSpacingTokenCreatedEvent {
        return Webhooks.isStyleguideSpacingTokenEvent(data) && data.action === "created";
    }

    static isStyleguideSpacingTokenDeletedEvent(data: WebhookEvent): data is StyleguideSpacingTokenDeletedEvent {
        return Webhooks.isStyleguideSpacingTokenEvent(data) && data.action === "deleted";
    }

    static isStyleguideSpacingTokenUpdatedEvent(data: WebhookEvent): data is StyleguideSpacingTokenUpdatedEvent {
        return Webhooks.isStyleguideSpacingTokenEvent(data) && data.action === "updated";
    }
}
