/* tslint:disable */
/* eslint-disable */
/**
 * Zeplin API
 * Access your resources in Zeplin
 *
 * Contact: support@zeplin.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



import globalAxios, { AxiosInstance } from 'axios';

import { BaseAPI, BASE_PATH } from './base';
import { Configuration } from "./configuration";

import { AuthorizationApi } from './apis/authorization-api';
import { ColorsApi } from './apis/colors-api';
import { ComponentsApi } from './apis/components-api';
import { ConnectedComponentsApi } from './apis/connected-components-api';
import { DesignTokensApi } from './apis/design-tokens-api';
import { FlowsApi } from './apis/flows-api';
import { NotificationsApi } from './apis/notifications-api';
import { OrganizationsApi } from './apis/organizations-api';
import { ProjectsApi } from './apis/projects-api';
import { ScreensApi } from './apis/screens-api';
import { SpacingApi } from './apis/spacing-api';
import { StyleguidesApi } from './apis/styleguides-api';
import { TextStylesApi } from './apis/text-styles-api';
import { UsersApi } from './apis/users-api';
import { VariableCollectionsApi } from './apis/variable-collections-api';
import { WebhooksApi } from './apis/webhooks-api';

import { Webhooks } from './utilities/webhooks';


export class ZeplinApi extends BaseAPI {
    protected configuration: Configuration | undefined;
    authorization: AuthorizationApi;
    colors: ColorsApi;
    components: ComponentsApi;
    connectedComponents: ConnectedComponentsApi;
    designTokens: DesignTokensApi;
    flows: FlowsApi;
    notifications: NotificationsApi;
    organizations: OrganizationsApi;
    projects: ProjectsApi;
    screens: ScreensApi;
    spacing: SpacingApi;
    styleguides: StyleguidesApi;
    textStyles: TextStylesApi;
    users: UsersApi;
    variableCollections: VariableCollectionsApi;
    webhooks: WebhooksApi;


    static Webhooks = Webhooks;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        super(configuration, basePath, axios);
        this.authorization = new AuthorizationApi(configuration, basePath, axios);
        this.colors = new ColorsApi(configuration, basePath, axios);
        this.components = new ComponentsApi(configuration, basePath, axios);
        this.connectedComponents = new ConnectedComponentsApi(configuration, basePath, axios);
        this.designTokens = new DesignTokensApi(configuration, basePath, axios);
        this.flows = new FlowsApi(configuration, basePath, axios);
        this.notifications = new NotificationsApi(configuration, basePath, axios);
        this.organizations = new OrganizationsApi(configuration, basePath, axios);
        this.projects = new ProjectsApi(configuration, basePath, axios);
        this.screens = new ScreensApi(configuration, basePath, axios);
        this.spacing = new SpacingApi(configuration, basePath, axios);
        this.styleguides = new StyleguidesApi(configuration, basePath, axios);
        this.textStyles = new TextStylesApi(configuration, basePath, axios);
        this.users = new UsersApi(configuration, basePath, axios);
        this.variableCollections = new VariableCollectionsApi(configuration, basePath, axios);
        this.webhooks = new WebhooksApi(configuration, basePath, axios);

    }
}

