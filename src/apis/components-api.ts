/* tslint:disable */
/* eslint-disable */
/**
 * Zeplin API
 * Access your resources in Zeplin
 *
 * Contact: support@zeplin.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosResponse } from 'axios';
import FormData from 'form-data';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import {
    Component,
    transformComponentToJSON,
    transformJSONToComponent
} from '../models';
// @ts-ignore
import {
    ComponentSection,
    transformComponentSectionToJSON,
    transformJSONToComponentSection
} from '../models';
// @ts-ignore
import {
    ComponentUpdateBody,
    transformComponentUpdateBodyToJSON,
    transformJSONToComponentUpdateBody
} from '../models';
// @ts-ignore
import {
    ComponentVersion,
    transformComponentVersionToJSON,
    transformJSONToComponentVersion
} from '../models';
// @ts-ignore
import {
    ErrorResponse,
    transformErrorResponseToJSON,
    transformJSONToErrorResponse
} from '../models';
// @ts-ignore
import {
    Page,
    transformPageToJSON,
    transformJSONToPage
} from '../models';
/**
 * ComponentsApi - axios parameter creator
 * @export
 */
export const ComponentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a project component by id
         * @summary Get a single project component
         * @param {string} projectId Project id
         * @param {string} componentId Component id
         * @param {boolean} [includeLatestVersion] Whether to include the latest version data in the Component object
         * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectComponent: async (projectId: string, componentId: string, includeLatestVersion?: boolean, includeLinkedStyleguides?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectComponent', 'projectId', projectId)
            // verify required parameter 'componentId' is not null or undefined
            assertParamExists('getProjectComponent', 'componentId', componentId)
            const localVarPath = `/v1/projects/{project_id}/components/{component_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"component_id"}}`, encodeURIComponent(String(componentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (includeLatestVersion !== undefined) {
                localVarQueryParameter['include_latest_version'] = includeLatestVersion;
            }

            if (includeLinkedStyleguides !== undefined) {
                localVarQueryParameter['include_linked_styleguides'] = includeLinkedStyleguides;
            }

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get latest version of the component in a project
         * @summary Get latest project component version
         * @param {string} projectId Project id
         * @param {string} componentId Component id
         * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectComponentLatestVersion: async (projectId: string, componentId: string, includeLinkedStyleguides?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectComponentLatestVersion', 'projectId', projectId)
            // verify required parameter 'componentId' is not null or undefined
            assertParamExists('getProjectComponentLatestVersion', 'componentId', componentId)
            const localVarPath = `/v1/projects/{project_id}/components/{component_id}/versions/latest`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"component_id"}}`, encodeURIComponent(String(componentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (includeLinkedStyleguides !== undefined) {
                localVarQueryParameter['include_linked_styleguides'] = includeLinkedStyleguides;
            }

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all component sections of the project
         * @summary Get project component sections
         * @param {string} projectId Project id
         * @param {string} [pageId] Filter by page id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectComponentSections: async (projectId: string, pageId?: string, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectComponentSections', 'projectId', projectId)
            const localVarPath = `/v1/projects/{project_id}/component_sections`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pageId !== undefined) {
                localVarQueryParameter['page_id'] = pageId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all components of a project
         * @summary Get project components
         * @param {string} projectId Project id
         * @param {string} [sectionId] Filter by section id
         * @param {'section' | 'created'} [sort] Sort components by their &#x60;section&#x60; or their &#x60;created&#x60; date
         * @param {boolean} [includeLatestVersion] Whether to include the latest version data in the Component object
         * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectComponents: async (projectId: string, sectionId?: string, sort?: 'section' | 'created', includeLatestVersion?: boolean, includeLinkedStyleguides?: boolean, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectComponents', 'projectId', projectId)
            const localVarPath = `/v1/projects/{project_id}/components`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sectionId !== undefined) {
                localVarQueryParameter['section_id'] = sectionId;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (includeLatestVersion !== undefined) {
                localVarQueryParameter['include_latest_version'] = includeLatestVersion;
            }

            if (includeLinkedStyleguides !== undefined) {
                localVarQueryParameter['include_linked_styleguides'] = includeLinkedStyleguides;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all pages of the project
         * @summary Get project pages
         * @param {string} projectId Project id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectPages: async (projectId: string, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectPages', 'projectId', projectId)
            const localVarPath = `/v1/projects/{project_id}/pages`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the component in a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
         * @summary Get a single styleguide component
         * @param {string} styleguideId Styleguide id
         * @param {string} componentId Component id
         * @param {string} [linkedProject] Reference project id
         * @param {string} [linkedStyleguide] Reference styleguide id
         * @param {boolean} [includeLatestVersion] Whether to include the latest version data in the Component object
         * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStyleguideComponent: async (styleguideId: string, componentId: string, linkedProject?: string, linkedStyleguide?: string, includeLatestVersion?: boolean, includeLinkedStyleguides?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'styleguideId' is not null or undefined
            assertParamExists('getStyleguideComponent', 'styleguideId', styleguideId)
            // verify required parameter 'componentId' is not null or undefined
            assertParamExists('getStyleguideComponent', 'componentId', componentId)
            const localVarPath = `/v1/styleguides/{styleguide_id}/components/{component_id}`
                .replace(`{${"styleguide_id"}}`, encodeURIComponent(String(styleguideId)))
                .replace(`{${"component_id"}}`, encodeURIComponent(String(componentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (linkedProject !== undefined) {
                localVarQueryParameter['linked_project'] = linkedProject;
            }

            if (linkedStyleguide !== undefined) {
                localVarQueryParameter['linked_styleguide'] = linkedStyleguide;
            }

            if (includeLatestVersion !== undefined) {
                localVarQueryParameter['include_latest_version'] = includeLatestVersion;
            }

            if (includeLinkedStyleguides !== undefined) {
                localVarQueryParameter['include_linked_styleguides'] = includeLinkedStyleguides;
            }

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the latest version of the component in a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
         * @summary Get latest styleguide component version
         * @param {string} styleguideId Styleguide id
         * @param {string} componentId Component id
         * @param {string} [linkedProject] Reference project id
         * @param {string} [linkedStyleguide] Reference styleguide id
         * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStyleguideComponentLatestVersion: async (styleguideId: string, componentId: string, linkedProject?: string, linkedStyleguide?: string, includeLinkedStyleguides?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'styleguideId' is not null or undefined
            assertParamExists('getStyleguideComponentLatestVersion', 'styleguideId', styleguideId)
            // verify required parameter 'componentId' is not null or undefined
            assertParamExists('getStyleguideComponentLatestVersion', 'componentId', componentId)
            const localVarPath = `/v1/styleguides/{styleguide_id}/components/{component_id}/versions/latest`
                .replace(`{${"styleguide_id"}}`, encodeURIComponent(String(styleguideId)))
                .replace(`{${"component_id"}}`, encodeURIComponent(String(componentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (linkedProject !== undefined) {
                localVarQueryParameter['linked_project'] = linkedProject;
            }

            if (linkedStyleguide !== undefined) {
                localVarQueryParameter['linked_styleguide'] = linkedStyleguide;
            }

            if (includeLinkedStyleguides !== undefined) {
                localVarQueryParameter['include_linked_styleguides'] = includeLinkedStyleguides;
            }

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the component sections of a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
         * @summary Get styleguide component sections
         * @param {string} styleguideId Styleguide id
         * @param {string} [pageId] Filter by page id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {string} [linkedProject] Reference project id
         * @param {string} [linkedStyleguide] Reference styleguide id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStyleguideComponentSections: async (styleguideId: string, pageId?: string, limit?: number, offset?: number, linkedProject?: string, linkedStyleguide?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'styleguideId' is not null or undefined
            assertParamExists('getStyleguideComponentSections', 'styleguideId', styleguideId)
            const localVarPath = `/v1/styleguides/{styleguide_id}/component_sections`
                .replace(`{${"styleguide_id"}}`, encodeURIComponent(String(styleguideId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pageId !== undefined) {
                localVarQueryParameter['page_id'] = pageId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (linkedProject !== undefined) {
                localVarQueryParameter['linked_project'] = linkedProject;
            }

            if (linkedStyleguide !== undefined) {
                localVarQueryParameter['linked_styleguide'] = linkedStyleguide;
            }

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns components in a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
         * @summary Get styleguide components
         * @param {string} styleguideId Styleguide id
         * @param {string} [sectionId] Filter by section id
         * @param {'section' | 'created'} [sort] Sort components by their &#x60;section&#x60; or their &#x60;created&#x60; date
         * @param {string} [linkedProject] Reference project id
         * @param {string} [linkedStyleguide] Reference styleguide id
         * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
         * @param {boolean} [includeLatestVersion] Whether to include the latest version data in the Component object
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStyleguideComponents: async (styleguideId: string, sectionId?: string, sort?: 'section' | 'created', linkedProject?: string, linkedStyleguide?: string, includeLinkedStyleguides?: boolean, includeLatestVersion?: boolean, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'styleguideId' is not null or undefined
            assertParamExists('getStyleguideComponents', 'styleguideId', styleguideId)
            const localVarPath = `/v1/styleguides/{styleguide_id}/components`
                .replace(`{${"styleguide_id"}}`, encodeURIComponent(String(styleguideId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sectionId !== undefined) {
                localVarQueryParameter['section_id'] = sectionId;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (linkedProject !== undefined) {
                localVarQueryParameter['linked_project'] = linkedProject;
            }

            if (linkedStyleguide !== undefined) {
                localVarQueryParameter['linked_styleguide'] = linkedStyleguide;
            }

            if (includeLinkedStyleguides !== undefined) {
                localVarQueryParameter['include_linked_styleguides'] = includeLinkedStyleguides;
            }

            if (includeLatestVersion !== undefined) {
                localVarQueryParameter['include_latest_version'] = includeLatestVersion;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all pages of the styleguide
         * @summary Get styleguide pages
         * @param {string} styleguideId Styleguide id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStyleguidePages: async (styleguideId: string, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'styleguideId' is not null or undefined
            assertParamExists('getStyleguidePages', 'styleguideId', styleguideId)
            const localVarPath = `/v1/styleguides/{styleguide_id}/pages`
                .replace(`{${"styleguide_id"}}`, encodeURIComponent(String(styleguideId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

    
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a component\'s description in a project
         * @summary Update a project component
         * @param {string} projectId Project id
         * @param {string} componentId Component id
         * @param {ComponentUpdateBody} componentUpdateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectComponent: async (projectId: string, componentId: string, componentUpdateBody: ComponentUpdateBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateProjectComponent', 'projectId', projectId)
            // verify required parameter 'componentId' is not null or undefined
            assertParamExists('updateProjectComponent', 'componentId', componentId)
            // verify required parameter 'componentUpdateBody' is not null or undefined
            assertParamExists('updateProjectComponent', 'componentUpdateBody', componentUpdateBody)
            const localVarPath = `/v1/projects/{project_id}/components/{component_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"component_id"}}`, encodeURIComponent(String(componentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transformComponentUpdateBodyToJSON(componentUpdateBody), localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a component\'s description in a styleguide
         * @summary Update a styleguide component
         * @param {string} styleguideId Styleguide id
         * @param {string} componentId Component id
         * @param {ComponentUpdateBody} componentUpdateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStyleguideComponent: async (styleguideId: string, componentId: string, componentUpdateBody: ComponentUpdateBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'styleguideId' is not null or undefined
            assertParamExists('updateStyleguideComponent', 'styleguideId', styleguideId)
            // verify required parameter 'componentId' is not null or undefined
            assertParamExists('updateStyleguideComponent', 'componentId', componentId)
            // verify required parameter 'componentUpdateBody' is not null or undefined
            assertParamExists('updateStyleguideComponent', 'componentUpdateBody', componentUpdateBody)
            const localVarPath = `/v1/styleguides/{styleguide_id}/components/{component_id}`
                .replace(`{${"styleguide_id"}}`, encodeURIComponent(String(styleguideId)))
                .replace(`{${"component_id"}}`, encodeURIComponent(String(componentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            // authentication PersonalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transformComponentUpdateBodyToJSON(componentUpdateBody), localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ComponentsApi - functional programming interface
 * @export
 */
export const ComponentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ComponentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a project component by id
         * @summary Get a single project component
         * @param {string} projectId Project id
         * @param {string} componentId Component id
         * @param {boolean} [includeLatestVersion] Whether to include the latest version data in the Component object
         * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectComponent(projectId: string, componentId: string, includeLatestVersion?: boolean, includeLinkedStyleguides?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectComponent(projectId, componentId, includeLatestVersion, includeLinkedStyleguides, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get latest version of the component in a project
         * @summary Get latest project component version
         * @param {string} projectId Project id
         * @param {string} componentId Component id
         * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectComponentLatestVersion(projectId: string, componentId: string, includeLinkedStyleguides?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectComponentLatestVersion(projectId, componentId, includeLinkedStyleguides, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all component sections of the project
         * @summary Get project component sections
         * @param {string} projectId Project id
         * @param {string} [pageId] Filter by page id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectComponentSections(projectId: string, pageId?: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectComponentSections(projectId, pageId, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all components of a project
         * @summary Get project components
         * @param {string} projectId Project id
         * @param {string} [sectionId] Filter by section id
         * @param {'section' | 'created'} [sort] Sort components by their &#x60;section&#x60; or their &#x60;created&#x60; date
         * @param {boolean} [includeLatestVersion] Whether to include the latest version data in the Component object
         * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectComponents(projectId: string, sectionId?: string, sort?: 'section' | 'created', includeLatestVersion?: boolean, includeLinkedStyleguides?: boolean, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectComponents(projectId, sectionId, sort, includeLatestVersion, includeLinkedStyleguides, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all pages of the project
         * @summary Get project pages
         * @param {string} projectId Project id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectPages(projectId: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectPages(projectId, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the component in a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
         * @summary Get a single styleguide component
         * @param {string} styleguideId Styleguide id
         * @param {string} componentId Component id
         * @param {string} [linkedProject] Reference project id
         * @param {string} [linkedStyleguide] Reference styleguide id
         * @param {boolean} [includeLatestVersion] Whether to include the latest version data in the Component object
         * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStyleguideComponent(styleguideId: string, componentId: string, linkedProject?: string, linkedStyleguide?: string, includeLatestVersion?: boolean, includeLinkedStyleguides?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStyleguideComponent(styleguideId, componentId, linkedProject, linkedStyleguide, includeLatestVersion, includeLinkedStyleguides, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the latest version of the component in a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
         * @summary Get latest styleguide component version
         * @param {string} styleguideId Styleguide id
         * @param {string} componentId Component id
         * @param {string} [linkedProject] Reference project id
         * @param {string} [linkedStyleguide] Reference styleguide id
         * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStyleguideComponentLatestVersion(styleguideId: string, componentId: string, linkedProject?: string, linkedStyleguide?: string, includeLinkedStyleguides?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStyleguideComponentLatestVersion(styleguideId, componentId, linkedProject, linkedStyleguide, includeLinkedStyleguides, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the component sections of a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
         * @summary Get styleguide component sections
         * @param {string} styleguideId Styleguide id
         * @param {string} [pageId] Filter by page id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {string} [linkedProject] Reference project id
         * @param {string} [linkedStyleguide] Reference styleguide id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStyleguideComponentSections(styleguideId: string, pageId?: string, limit?: number, offset?: number, linkedProject?: string, linkedStyleguide?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStyleguideComponentSections(styleguideId, pageId, limit, offset, linkedProject, linkedStyleguide, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns components in a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
         * @summary Get styleguide components
         * @param {string} styleguideId Styleguide id
         * @param {string} [sectionId] Filter by section id
         * @param {'section' | 'created'} [sort] Sort components by their &#x60;section&#x60; or their &#x60;created&#x60; date
         * @param {string} [linkedProject] Reference project id
         * @param {string} [linkedStyleguide] Reference styleguide id
         * @param {boolean} [includeLinkedStyleguides] Whether to include linked styleguides or not
         * @param {boolean} [includeLatestVersion] Whether to include the latest version data in the Component object
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStyleguideComponents(styleguideId: string, sectionId?: string, sort?: 'section' | 'created', linkedProject?: string, linkedStyleguide?: string, includeLinkedStyleguides?: boolean, includeLatestVersion?: boolean, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStyleguideComponents(styleguideId, sectionId, sort, linkedProject, linkedStyleguide, includeLinkedStyleguides, includeLatestVersion, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all pages of the styleguide
         * @summary Get styleguide pages
         * @param {string} styleguideId Styleguide id
         * @param {number} [limit] Pagination limit
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStyleguidePages(styleguideId: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStyleguidePages(styleguideId, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a component\'s description in a project
         * @summary Update a project component
         * @param {string} projectId Project id
         * @param {string} componentId Component id
         * @param {ComponentUpdateBody} componentUpdateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProjectComponent(projectId: string, componentId: string, componentUpdateBody: ComponentUpdateBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProjectComponent(projectId, componentId, componentUpdateBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a component\'s description in a styleguide
         * @summary Update a styleguide component
         * @param {string} styleguideId Styleguide id
         * @param {string} componentId Component id
         * @param {ComponentUpdateBody} componentUpdateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStyleguideComponent(styleguideId: string, componentId: string, componentUpdateBody: ComponentUpdateBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStyleguideComponent(styleguideId, componentId, componentUpdateBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};


/**
 * Search parameters for getProjectComponent operation in ComponentsApi.
 * @export
 * @interface ComponentsApiGetProjectComponentSearchParams
 */
export interface ComponentsApiGetProjectComponentSearchParams {
    /**
     * Whether to include the latest version data in the Component object
     * @type {boolean}
     * @memberof ComponentsApiGetProjectComponentSearchParams
     */
    readonly includeLatestVersion?: boolean;

    /**
     * Whether to include linked styleguides or not
     * @type {boolean}
     * @memberof ComponentsApiGetProjectComponentSearchParams
     */
    readonly includeLinkedStyleguides?: boolean;
}

/**
 * Search parameters for getProjectComponentLatestVersion operation in ComponentsApi.
 * @export
 * @interface ComponentsApiGetProjectComponentLatestVersionSearchParams
 */
export interface ComponentsApiGetProjectComponentLatestVersionSearchParams {
    /**
     * Whether to include linked styleguides or not
     * @type {boolean}
     * @memberof ComponentsApiGetProjectComponentLatestVersionSearchParams
     */
    readonly includeLinkedStyleguides?: boolean;
}

/**
 * Search parameters for getProjectComponentSections operation in ComponentsApi.
 * @export
 * @interface ComponentsApiGetProjectComponentSectionsSearchParams
 */
export interface ComponentsApiGetProjectComponentSectionsSearchParams {
    /**
     * Filter by page id
     * @type {string}
     * @memberof ComponentsApiGetProjectComponentSectionsSearchParams
     */
    readonly pageId?: string;

    /**
     * Pagination limit
     * @type {number}
     * @memberof ComponentsApiGetProjectComponentSectionsSearchParams
     */
    readonly limit?: number;

    /**
     * Pagination offset
     * @type {number}
     * @memberof ComponentsApiGetProjectComponentSectionsSearchParams
     */
    readonly offset?: number;
}

/**
 * Search parameters for getProjectComponents operation in ComponentsApi.
 * @export
 * @interface ComponentsApiGetProjectComponentsSearchParams
 */
export interface ComponentsApiGetProjectComponentsSearchParams {
    /**
     * Filter by section id
     * @type {string}
     * @memberof ComponentsApiGetProjectComponentsSearchParams
     */
    readonly sectionId?: string;

    /**
     * Sort components by their &#x60;section&#x60; or their &#x60;created&#x60; date
     * @type {'section' | 'created'}
     * @memberof ComponentsApiGetProjectComponentsSearchParams
     */
    readonly sort?: 'section' | 'created';

    /**
     * Whether to include the latest version data in the Component object
     * @type {boolean}
     * @memberof ComponentsApiGetProjectComponentsSearchParams
     */
    readonly includeLatestVersion?: boolean;

    /**
     * Whether to include linked styleguides or not
     * @type {boolean}
     * @memberof ComponentsApiGetProjectComponentsSearchParams
     */
    readonly includeLinkedStyleguides?: boolean;

    /**
     * Pagination limit
     * @type {number}
     * @memberof ComponentsApiGetProjectComponentsSearchParams
     */
    readonly limit?: number;

    /**
     * Pagination offset
     * @type {number}
     * @memberof ComponentsApiGetProjectComponentsSearchParams
     */
    readonly offset?: number;
}

/**
 * Search parameters for getProjectPages operation in ComponentsApi.
 * @export
 * @interface ComponentsApiGetProjectPagesSearchParams
 */
export interface ComponentsApiGetProjectPagesSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof ComponentsApiGetProjectPagesSearchParams
     */
    readonly limit?: number;

    /**
     * Pagination offset
     * @type {number}
     * @memberof ComponentsApiGetProjectPagesSearchParams
     */
    readonly offset?: number;
}

/**
 * Search parameters for getStyleguideComponent operation in ComponentsApi.
 * @export
 * @interface ComponentsApiGetStyleguideComponentSearchParams
 */
export interface ComponentsApiGetStyleguideComponentSearchParams {
    /**
     * Reference project id
     * @type {string}
     * @memberof ComponentsApiGetStyleguideComponentSearchParams
     */
    readonly linkedProject?: string;

    /**
     * Reference styleguide id
     * @type {string}
     * @memberof ComponentsApiGetStyleguideComponentSearchParams
     */
    readonly linkedStyleguide?: string;

    /**
     * Whether to include the latest version data in the Component object
     * @type {boolean}
     * @memberof ComponentsApiGetStyleguideComponentSearchParams
     */
    readonly includeLatestVersion?: boolean;

    /**
     * Whether to include linked styleguides or not
     * @type {boolean}
     * @memberof ComponentsApiGetStyleguideComponentSearchParams
     */
    readonly includeLinkedStyleguides?: boolean;
}

/**
 * Search parameters for getStyleguideComponentLatestVersion operation in ComponentsApi.
 * @export
 * @interface ComponentsApiGetStyleguideComponentLatestVersionSearchParams
 */
export interface ComponentsApiGetStyleguideComponentLatestVersionSearchParams {
    /**
     * Reference project id
     * @type {string}
     * @memberof ComponentsApiGetStyleguideComponentLatestVersionSearchParams
     */
    readonly linkedProject?: string;

    /**
     * Reference styleguide id
     * @type {string}
     * @memberof ComponentsApiGetStyleguideComponentLatestVersionSearchParams
     */
    readonly linkedStyleguide?: string;

    /**
     * Whether to include linked styleguides or not
     * @type {boolean}
     * @memberof ComponentsApiGetStyleguideComponentLatestVersionSearchParams
     */
    readonly includeLinkedStyleguides?: boolean;
}

/**
 * Search parameters for getStyleguideComponentSections operation in ComponentsApi.
 * @export
 * @interface ComponentsApiGetStyleguideComponentSectionsSearchParams
 */
export interface ComponentsApiGetStyleguideComponentSectionsSearchParams {
    /**
     * Filter by page id
     * @type {string}
     * @memberof ComponentsApiGetStyleguideComponentSectionsSearchParams
     */
    readonly pageId?: string;

    /**
     * Pagination limit
     * @type {number}
     * @memberof ComponentsApiGetStyleguideComponentSectionsSearchParams
     */
    readonly limit?: number;

    /**
     * Pagination offset
     * @type {number}
     * @memberof ComponentsApiGetStyleguideComponentSectionsSearchParams
     */
    readonly offset?: number;

    /**
     * Reference project id
     * @type {string}
     * @memberof ComponentsApiGetStyleguideComponentSectionsSearchParams
     */
    readonly linkedProject?: string;

    /**
     * Reference styleguide id
     * @type {string}
     * @memberof ComponentsApiGetStyleguideComponentSectionsSearchParams
     */
    readonly linkedStyleguide?: string;
}

/**
 * Search parameters for getStyleguideComponents operation in ComponentsApi.
 * @export
 * @interface ComponentsApiGetStyleguideComponentsSearchParams
 */
export interface ComponentsApiGetStyleguideComponentsSearchParams {
    /**
     * Filter by section id
     * @type {string}
     * @memberof ComponentsApiGetStyleguideComponentsSearchParams
     */
    readonly sectionId?: string;

    /**
     * Sort components by their &#x60;section&#x60; or their &#x60;created&#x60; date
     * @type {'section' | 'created'}
     * @memberof ComponentsApiGetStyleguideComponentsSearchParams
     */
    readonly sort?: 'section' | 'created';

    /**
     * Reference project id
     * @type {string}
     * @memberof ComponentsApiGetStyleguideComponentsSearchParams
     */
    readonly linkedProject?: string;

    /**
     * Reference styleguide id
     * @type {string}
     * @memberof ComponentsApiGetStyleguideComponentsSearchParams
     */
    readonly linkedStyleguide?: string;

    /**
     * Whether to include linked styleguides or not
     * @type {boolean}
     * @memberof ComponentsApiGetStyleguideComponentsSearchParams
     */
    readonly includeLinkedStyleguides?: boolean;

    /**
     * Whether to include the latest version data in the Component object
     * @type {boolean}
     * @memberof ComponentsApiGetStyleguideComponentsSearchParams
     */
    readonly includeLatestVersion?: boolean;

    /**
     * Pagination limit
     * @type {number}
     * @memberof ComponentsApiGetStyleguideComponentsSearchParams
     */
    readonly limit?: number;

    /**
     * Pagination offset
     * @type {number}
     * @memberof ComponentsApiGetStyleguideComponentsSearchParams
     */
    readonly offset?: number;
}

/**
 * Search parameters for getStyleguidePages operation in ComponentsApi.
 * @export
 * @interface ComponentsApiGetStyleguidePagesSearchParams
 */
export interface ComponentsApiGetStyleguidePagesSearchParams {
    /**
     * Pagination limit
     * @type {number}
     * @memberof ComponentsApiGetStyleguidePagesSearchParams
     */
    readonly limit?: number;

    /**
     * Pagination offset
     * @type {number}
     * @memberof ComponentsApiGetStyleguidePagesSearchParams
     */
    readonly offset?: number;
}




/**
 * ComponentsApi - object-oriented interface
 * @export
 * @class ComponentsApi
 * @extends {BaseAPI}
 */
export class ComponentsApi extends BaseAPI {
    /**
     * Get a project component by id
     * @summary Get a single project component
     * @param {string} projectId Project id
     * @param {string} componentId Component id
     * @param {ComponentsApiGetProjectComponentSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */
    public async getProjectComponent(projectId: string, componentId: string, searchParams: ComponentsApiGetProjectComponentSearchParams = {}, options?: any) : Promise<AxiosResponse<Component>> {
        const componentsApiFp = ComponentsApiFp(this.configuration);
        const request = await componentsApiFp.getProjectComponent(projectId, componentId, searchParams.includeLatestVersion, searchParams.includeLinkedStyleguides, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: transformJSONToComponent(response.data)
        };
    }

    /**
     * Get latest version of the component in a project
     * @summary Get latest project component version
     * @param {string} projectId Project id
     * @param {string} componentId Component id
     * @param {ComponentsApiGetProjectComponentLatestVersionSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */
    public async getProjectComponentLatestVersion(projectId: string, componentId: string, searchParams: ComponentsApiGetProjectComponentLatestVersionSearchParams = {}, options?: any) : Promise<AxiosResponse<ComponentVersion>> {
        const componentsApiFp = ComponentsApiFp(this.configuration);
        const request = await componentsApiFp.getProjectComponentLatestVersion(projectId, componentId, searchParams.includeLinkedStyleguides, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: transformJSONToComponentVersion(response.data)
        };
    }

    /**
     * List all component sections of the project
     * @summary Get project component sections
     * @param {string} projectId Project id
     * @param {ComponentsApiGetProjectComponentSectionsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */
    public async getProjectComponentSections(projectId: string, searchParams: ComponentsApiGetProjectComponentSectionsSearchParams = {}, options?: any) : Promise<AxiosResponse<Array<ComponentSection>>> {
        const componentsApiFp = ComponentsApiFp(this.configuration);
        const request = await componentsApiFp.getProjectComponentSections(projectId, searchParams.pageId, searchParams.limit, searchParams.offset, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: response.data.map(transformJSONToComponentSection)
        };
    }

    /**
     * List all components of a project
     * @summary Get project components
     * @param {string} projectId Project id
     * @param {ComponentsApiGetProjectComponentsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */
    public async getProjectComponents(projectId: string, searchParams: ComponentsApiGetProjectComponentsSearchParams = {}, options?: any) : Promise<AxiosResponse<Array<Component>>> {
        const componentsApiFp = ComponentsApiFp(this.configuration);
        const request = await componentsApiFp.getProjectComponents(projectId, searchParams.sectionId, searchParams.sort, searchParams.includeLatestVersion, searchParams.includeLinkedStyleguides, searchParams.limit, searchParams.offset, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: response.data.map(transformJSONToComponent)
        };
    }

    /**
     * List all pages of the project
     * @summary Get project pages
     * @param {string} projectId Project id
     * @param {ComponentsApiGetProjectPagesSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */
    public async getProjectPages(projectId: string, searchParams: ComponentsApiGetProjectPagesSearchParams = {}, options?: any) : Promise<AxiosResponse<Array<Page>>> {
        const componentsApiFp = ComponentsApiFp(this.configuration);
        const request = await componentsApiFp.getProjectPages(projectId, searchParams.limit, searchParams.offset, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: response.data.map(transformJSONToPage)
        };
    }

    /**
     * Returns the component in a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
     * @summary Get a single styleguide component
     * @param {string} styleguideId Styleguide id
     * @param {string} componentId Component id
     * @param {ComponentsApiGetStyleguideComponentSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */
    public async getStyleguideComponent(styleguideId: string, componentId: string, searchParams: ComponentsApiGetStyleguideComponentSearchParams = {}, options?: any) : Promise<AxiosResponse<Component>> {
        const componentsApiFp = ComponentsApiFp(this.configuration);
        const request = await componentsApiFp.getStyleguideComponent(styleguideId, componentId, searchParams.linkedProject, searchParams.linkedStyleguide, searchParams.includeLatestVersion, searchParams.includeLinkedStyleguides, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: transformJSONToComponent(response.data)
        };
    }

    /**
     * Returns the latest version of the component in a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
     * @summary Get latest styleguide component version
     * @param {string} styleguideId Styleguide id
     * @param {string} componentId Component id
     * @param {ComponentsApiGetStyleguideComponentLatestVersionSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */
    public async getStyleguideComponentLatestVersion(styleguideId: string, componentId: string, searchParams: ComponentsApiGetStyleguideComponentLatestVersionSearchParams = {}, options?: any) : Promise<AxiosResponse<ComponentVersion>> {
        const componentsApiFp = ComponentsApiFp(this.configuration);
        const request = await componentsApiFp.getStyleguideComponentLatestVersion(styleguideId, componentId, searchParams.linkedProject, searchParams.linkedStyleguide, searchParams.includeLinkedStyleguides, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: transformJSONToComponentVersion(response.data)
        };
    }

    /**
     * Returns the component sections of a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
     * @summary Get styleguide component sections
     * @param {string} styleguideId Styleguide id
     * @param {ComponentsApiGetStyleguideComponentSectionsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */
    public async getStyleguideComponentSections(styleguideId: string, searchParams: ComponentsApiGetStyleguideComponentSectionsSearchParams = {}, options?: any) : Promise<AxiosResponse<Array<ComponentSection>>> {
        const componentsApiFp = ComponentsApiFp(this.configuration);
        const request = await componentsApiFp.getStyleguideComponentSections(styleguideId, searchParams.pageId, searchParams.limit, searchParams.offset, searchParams.linkedProject, searchParams.linkedStyleguide, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: response.data.map(transformJSONToComponentSection)
        };
    }

    /**
     * Returns components in a styleguide that user has access.  See [Styleguide docs](#getstyleguide) for more details about how `linked_project` and `linked_styleguide` parameters can be used to retrieve resources from styleguides that user is eligible to access. 
     * @summary Get styleguide components
     * @param {string} styleguideId Styleguide id
     * @param {ComponentsApiGetStyleguideComponentsSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */
    public async getStyleguideComponents(styleguideId: string, searchParams: ComponentsApiGetStyleguideComponentsSearchParams = {}, options?: any) : Promise<AxiosResponse<Array<Component>>> {
        const componentsApiFp = ComponentsApiFp(this.configuration);
        const request = await componentsApiFp.getStyleguideComponents(styleguideId, searchParams.sectionId, searchParams.sort, searchParams.linkedProject, searchParams.linkedStyleguide, searchParams.includeLinkedStyleguides, searchParams.includeLatestVersion, searchParams.limit, searchParams.offset, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: response.data.map(transformJSONToComponent)
        };
    }

    /**
     * List all pages of the styleguide
     * @summary Get styleguide pages
     * @param {string} styleguideId Styleguide id
     * @param {ComponentsApiGetStyleguidePagesSearchParams} [searchParams] Search parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */
    public async getStyleguidePages(styleguideId: string, searchParams: ComponentsApiGetStyleguidePagesSearchParams = {}, options?: any) : Promise<AxiosResponse<Array<Page>>> {
        const componentsApiFp = ComponentsApiFp(this.configuration);
        const request = await componentsApiFp.getStyleguidePages(styleguideId, searchParams.limit, searchParams.offset, options);
        const response = await request(this.axios, this.basePath);
        return {
            ...response,
            data: response.data.map(transformJSONToPage)
        };
    }

    /**
     * Update a component\'s description in a project
     * @summary Update a project component
     * @param {string} projectId Project id
     * @param {string} componentId Component id
     * @param {ComponentUpdateBody} componentUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */
    public async updateProjectComponent(projectId: string, componentId: string, componentUpdateBody: ComponentUpdateBody, options?: any) : Promise<AxiosResponse<void>> {
        const componentsApiFp = ComponentsApiFp(this.configuration);
        const request = await componentsApiFp.updateProjectComponent(projectId, componentId, componentUpdateBody, options);
        const response = await request(this.axios, this.basePath);
        return response;
    }

    /**
     * Update a component\'s description in a styleguide
     * @summary Update a styleguide component
     * @param {string} styleguideId Styleguide id
     * @param {string} componentId Component id
     * @param {ComponentUpdateBody} componentUpdateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */
    public async updateStyleguideComponent(styleguideId: string, componentId: string, componentUpdateBody: ComponentUpdateBody, options?: any) : Promise<AxiosResponse<void>> {
        const componentsApiFp = ComponentsApiFp(this.configuration);
        const request = await componentsApiFp.updateStyleguideComponent(styleguideId, componentId, componentUpdateBody, options);
        const response = await request(this.axios, this.basePath);
        return response;
    }
}
