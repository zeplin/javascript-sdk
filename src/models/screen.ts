/* tslint:disable */
/* eslint-disable */
/**
 * Zeplin API
 * Access your resources in Zeplin
 *
 * Contact: support@zeplin.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import {
    EntityReference,
    transformEntityReferenceToJSON,
    transformJSONToEntityReference
} from './entity-reference';
import {
    ScreenVariant,
    transformScreenVariantToJSON,
    transformJSONToScreenVariant
} from './screen-variant';
import {
    SnapshotImage,
    transformSnapshotImageToJSON,
    transformJSONToSnapshotImage
} from './snapshot-image';


export const transformScreenToJSON = function (value: Screen): any {
    return {
        id: value.id,
        name: value.name,
        description: value.description,
        tags: value.tags,
        image: transformSnapshotImageToJSON(value.image),
        created: value.created,
        updated: value.updated,
        number_of_versions: value.numberOfVersions,
        number_of_notes: value.numberOfNotes,
        number_of_annotations: value.numberOfAnnotations,
        section: value.section && transformEntityReferenceToJSON(value.section),
        variant: value.variant && transformScreenVariantToJSON(value.variant)
    }
}

export const transformJSONToScreen = function (value: any): Screen {
    return {
        id: value.id,
        name: value.name,
        description: value.description,
        tags: value.tags,
        image: transformJSONToSnapshotImage(value.image),
        created: value.created,
        updated: value.updated,
        numberOfVersions: value.number_of_versions,
        numberOfNotes: value.number_of_notes,
        numberOfAnnotations: value.number_of_annotations,
        section: value.section && transformJSONToEntityReference(value.section),
        variant: value.variant && transformJSONToScreenVariant(value.variant)
    }
}

/**
 * 
 * @export
 * @interface Screen
 */
export interface Screen {
    /**
     * The unique id of the screen
     * @type {string}
     * @memberof Screen
     */
    id: string;
    /**
     * The name of the screen
     * @type {string}
     * @memberof Screen
     */
    name: string;
    /**
     * The description of the screen
     * @type {string}
     * @memberof Screen
     */
    description?: string;
    /**
     * The tags platform of the screen
     * @type {Array<string>}
     * @memberof Screen
     */
    tags: Array<string>;
    /**
     * 
     * @type {SnapshotImage}
     * @memberof Screen
     */
    image: SnapshotImage;
    /**
     * The unix timestamp when the screen was created
     * @type {number}
     * @memberof Screen
     */
    created: number;
    /**
     * The unix timestamp when the screen was updated
     * @type {number}
     * @memberof Screen
     */
    updated?: number;
    /**
     * The number of versions exported to the screen
     * @type {number}
     * @memberof Screen
     */
    numberOfVersions: number;
    /**
     * The number of notes in the screen
     * @type {number}
     * @memberof Screen
     */
    numberOfNotes: number;
    /**
     * The number of annotations in the screen
     * @type {number}
     * @memberof Screen
     */
    numberOfAnnotations: number;
    /**
     * 
     * @type {EntityReference}
     * @memberof Screen
     */
    section?: EntityReference;
    /**
     * 
     * @type {ScreenVariant}
     * @memberof Screen
     */
    variant?: ScreenVariant;
}


